plugins {
    id "idea"
    id "jacoco"
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.7.10"
    id "org.jetbrains.kotlin.plugin.spring" version "1.7.10"
    id "org.springframework.boot" version "2.7.5"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "com.adarshr.test-logger" version "3.2.0"
}

[compileKotlin, compileTestKotlin]*.kotlinOptions*.jvmTarget = "11"

ext {
    jwtVersion = "4.2.1"
    openApiVersion = "1.6.12"
    selenideVersion = "6.7.2"
    selenoidAdapterVersion = "2.3.3"
    postgresContainerVersion = "1.17.0"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        testSourceDirs += file("src/gui/kotlin")
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    gui {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    guiImplementation.extendsFrom testImplementation
    guiRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-logging"

    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.security:spring-security-oauth2-resource-server"
    implementation "org.springframework.security:spring-security-oauth2-jose"
    implementation "com.auth0:java-jwt:$jwtVersion"

    implementation "org.postgresql:postgresql"
    implementation "org.flywaydb:flyway-core"

    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "org.springdoc:springdoc-openapi-ui:$openApiVersion"
    implementation "org.springdoc:springdoc-openapi-kotlin:$openApiVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.testcontainers:postgresql:$postgresContainerVersion"

    guiImplementation "com.codeborne:selenide:$selenideVersion"
    guiImplementation "org.selenide:selenide-selenoid:$selenoidAdapterVersion"
}

class SeleniumTest extends Test {
    SeleniumTest() {
        description = "Runs Selenium tests"
        group = "verification"

        testClassesDirs = project.sourceSets.gui.output.classesDirs
        classpath = project.sourceSets.gui.runtimeClasspath

        systemProperties["file.encoding"] = "UTF-8"
        systemProperties["selenide.browser"] = "chrome"
        systemProperties["selenide.browserVersion"] = "108.0"
    }
}

task selenoid(type: SeleniumTest) {}

task selenide(type: SeleniumTest) {
    systemProperties["selenide.remote"] = "http://localhost:4444/wd/hub"
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

testlogger {
    theme "mocha"
}

bootJar {
    archiveFileName = "${project.name}.jar"
}