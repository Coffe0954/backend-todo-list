name: Deploy
on: [ workflow_dispatch ]
jobs:
  create-cluster:
    name: Create Cluster
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_TOKEN }}

      - name: Terraform deploy
        run: |
          cd terraform/
          terraform init
          terraform apply -auto-approve
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
          TF_VAR_do_token: ${{ secrets.DIGITAL_OCEAN_TOKEN }}

      - name: Setup k8s config
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 3600 ${{ vars.CLUSTER_NAME }}

      - name: Add helm repos
        run: |
          helm repo add romanow https://romanow.github.io/helm-charts/
          helm repo add aerokube https://charts.aerokube.com/
          helm repo update

      - name: Install TODO List
        run: |
          helm upgrade --install postgres romanow/postgres --values k8s/postgres/values.yaml --wait
          helm upgrade --install backend-todo-list romanow/java-service --values k8s/todo-list/backend.yaml --wait
          helm upgrade --install frontend-todo-list romanow/frontend --values k8s/todo-list/frontend.yaml --wait

      - name: Install Moon in cluster
        run: |
          helm upgrade --install moon aerokube/moon2 --values k8s/moon/values.yaml --wait

  test:
    name: UI Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [ "chrome", "firefox" ]
    needs: create-cluster
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: "17"
          cache: "gradle"

      - name: Run tests
        run: ./gradlew moon -Pbrowser=${{ matrix.browser }} -Pbase-url=http://frontend-todo-list

  destroy-cluster:
    name: Destroy Cluster
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs: [ test, create-cluster ]
    steps:
      - uses: actions/checkout@v4

      - name: Terraform destroy
        run: |
          cd terraform/
          terraform init
          terraform destroy -auto-approve
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
          TF_VAR_do_token: ${{ secrets.DIGITAL_OCEAN_TOKEN }}
